//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostOffice
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Windows.Controls;

    public partial class Publication
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Publication()
        {
            this.Feedback = new HashSet<Feedback>();
            this.Subscribe = new HashSet<Subscribe>();
        }
    
        public int id_Publication { get; set; }
        public int id_TypePublication { get; set; }
        public int id_TypeViewPublication { get; set; }
        public string Name { get; set; }
        public decimal PricePerMonth { get; set; }
        public byte[] Cover { get; set; }
        public int NumberIssuesPerMonth { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Feedback> Feedback { get; set; }
        public virtual TypePublication TypePublication { get; set; }
        public virtual TypeViewPublication TypeViewPublication { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Subscribe> Subscribe { get; set; }

        public string NewNumberIssuesPerMonth
        {
            get
            {
                return NumberIssuesPerMonth > 1 ? $"{TypePublication.Name}, {NumberIssuesPerMonth.ToString()} раза в месяц" : $" {TypePublication.Name}, {NumberIssuesPerMonth.ToString()} раз в месяц";
            }
        }

        public string PricePerMonthRounded
        {
            get
            {
                return PricePerMonth.ToString("F2");
            }
        }

        public int CountFeedBack
        {
            get
            {
                return Feedback.Count;
            }
        }

        public List<string> allTypePublicationString
        {
            get
            {
                List<TypePublication> typePublications = MainWindow.postOfficeEntity.TypePublication.ToList();
                List<string> stringTypePublication = new List<string>();
                foreach (var item in typePublications)
                {
                    stringTypePublication.Add(item.Name);
                }

                return stringTypePublication;
            }

            set
            {
                allTypePublicationString = value;
            }
        }

        public List<string> allTypeViewPublicationString
        {
            get
            {
                List<string> temp = new List<string>();

                List<TypeViewPublication> typeViewPublications = MainWindow.postOfficeEntity.TypeViewPublication.ToList();

                for (int i = 0; i < typeViewPublications.Count; i++)
                {
                    temp.Add(typeViewPublications[i].Name);
                }

                return temp;
            }

            set
            {
                allTypeViewPublicationString = value;
            }
        }

        public int CountSubscribe
        {
            get
            {
                return Subscribe.Count();
            }
        }

        public int CountSubscribeLastYear
        {
            get
            {
                int countSubscribeLastYear = 0;

                List<Subscribe> subscribes = Subscribe.ToList();

                for (int i = 0; i < subscribes.Count(); i++)
                {
                    if (subscribes[i].EntryTime >= new DateTime(2024, 01, 01) & subscribes[i].EntryTime <= new DateTime(2024, 12, 31))
                    {
                        countSubscribeLastYear++;
                    }
                }

                return countSubscribeLastYear;
            }
        }
    }
}
